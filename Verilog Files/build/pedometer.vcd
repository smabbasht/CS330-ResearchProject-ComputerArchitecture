$date
	Thu May 19 12:07:02 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb $end
$var reg 8 ! A [7:0] $end
$var reg 3 " Addr1 [2:0] $end
$var reg 3 # Addr2 [2:0] $end
$var reg 8 $ B [7:0] $end
$var reg 8 % Data1 [7:0] $end
$var reg 8 & Data2 [7:0] $end
$var reg 1 ' clk $end
$var reg 1 ( countSteps $end
$var reg 1 ) dualUpdateWeights $end
$var reg 1 * reset $end
$var reg 1 + updateWeight $end
$scope module Ped $end
$var wire 8 , A [7:0] $end
$var wire 3 - Addr1 [2:0] $end
$var wire 3 . Addr2 [2:0] $end
$var wire 8 / B [7:0] $end
$var wire 8 0 Data1 [7:0] $end
$var wire 8 1 Data2 [7:0] $end
$var wire 8 2 alpha1 [7:0] $end
$var wire 8 3 alpha2 [7:0] $end
$var wire 8 4 beta1 [7:0] $end
$var wire 8 5 beta2 [7:0] $end
$var wire 1 ' clk $end
$var wire 1 ( countSteps $end
$var wire 1 ) dualUpdateWeights $end
$var wire 1 6 reset $end
$var wire 8 7 theta1 [7:0] $end
$var wire 8 8 theta2 [7:0] $end
$var wire 1 9 updateWeight $end
$var wire 1 : updateWeights $end
$var wire 1 ; writeTotalSteps $end
$var wire 8 < updatedTotalSteps [7:0] $end
$var wire 1 = updateTotalSteps $end
$var wire 8 > totalSteps [7:0] $end
$var wire 1 ? step $end
$var wire 4 @ opcode [3:0] $end
$var wire 32 A instruction [31:0] $end
$scope module CU $end
$var wire 1 6 reset $end
$var wire 1 = updateTotalSteps $end
$var wire 1 9 updateWeight $end
$var wire 4 B opcode [3:0] $end
$upscope $end
$scope module EX $end
$var wire 8 C A [7:0] $end
$var wire 8 D B [7:0] $end
$var wire 8 E alpha1 [7:0] $end
$var wire 8 F alpha2 [7:0] $end
$var wire 8 G beta1 [7:0] $end
$var wire 8 H beta2 [7:0] $end
$var wire 1 ' clk $end
$var wire 8 I theta1 [7:0] $end
$var wire 8 J theta2 [7:0] $end
$var wire 1 ? step $end
$var wire 8 K n2_1out [7:0] $end
$var wire 8 L n1_2out [7:0] $end
$var wire 8 M n1_1out [7:0] $end
$scope module actBlock1 $end
$var wire 8 N value [7:0] $end
$var wire 1 ? S $end
$upscope $end
$scope module n1_1 $end
$var wire 8 O A [7:0] $end
$var wire 8 P B [7:0] $end
$var wire 1 ' clk $end
$var wire 8 Q multA [7:0] $end
$var wire 8 R multB [7:0] $end
$var wire 8 S nodeResult [7:0] $end
$var wire 8 T mult2Res [7:0] $end
$var wire 8 U mult1Res [7:0] $end
$var wire 8 V ffInput [7:0] $end
$scope module adder1 $end
$var wire 8 W O [7:0] $end
$var wire 8 X B [7:0] $end
$var wire 8 Y A [7:0] $end
$upscope $end
$scope module dff1 $end
$var wire 8 Z Q [7:0] $end
$var wire 1 ' clk $end
$var reg 8 [ D [7:0] $end
$upscope $end
$scope module mult1 $end
$var wire 8 \ A [7:0] $end
$var wire 8 ] B [7:0] $end
$var wire 8 ^ O [7:0] $end
$upscope $end
$scope module mult2 $end
$var wire 8 _ A [7:0] $end
$var wire 8 ` B [7:0] $end
$var wire 8 a O [7:0] $end
$upscope $end
$upscope $end
$scope module n1_2 $end
$var wire 8 b A [7:0] $end
$var wire 8 c B [7:0] $end
$var wire 1 ' clk $end
$var wire 8 d multA [7:0] $end
$var wire 8 e multB [7:0] $end
$var wire 8 f nodeResult [7:0] $end
$var wire 8 g mult2Res [7:0] $end
$var wire 8 h mult1Res [7:0] $end
$var wire 8 i ffInput [7:0] $end
$scope module adder1 $end
$var wire 8 j O [7:0] $end
$var wire 8 k B [7:0] $end
$var wire 8 l A [7:0] $end
$upscope $end
$scope module dff1 $end
$var wire 8 m Q [7:0] $end
$var wire 1 ' clk $end
$var reg 8 n D [7:0] $end
$upscope $end
$scope module mult1 $end
$var wire 8 o A [7:0] $end
$var wire 8 p B [7:0] $end
$var wire 8 q O [7:0] $end
$upscope $end
$scope module mult2 $end
$var wire 8 r A [7:0] $end
$var wire 8 s B [7:0] $end
$var wire 8 t O [7:0] $end
$upscope $end
$upscope $end
$scope module n2_1 $end
$var wire 8 u A [7:0] $end
$var wire 8 v B [7:0] $end
$var wire 1 ' clk $end
$var wire 8 w multA [7:0] $end
$var wire 8 x multB [7:0] $end
$var wire 8 y nodeResult [7:0] $end
$var wire 8 z mult2Res [7:0] $end
$var wire 8 { mult1Res [7:0] $end
$var wire 8 | ffInput [7:0] $end
$scope module adder1 $end
$var wire 8 } O [7:0] $end
$var wire 8 ~ B [7:0] $end
$var wire 8 !" A [7:0] $end
$upscope $end
$scope module dff1 $end
$var wire 8 "" Q [7:0] $end
$var wire 1 ' clk $end
$var reg 8 #" D [7:0] $end
$upscope $end
$scope module mult1 $end
$var wire 8 $" A [7:0] $end
$var wire 8 %" B [7:0] $end
$var wire 8 &" O [7:0] $end
$upscope $end
$scope module mult2 $end
$var wire 8 '" A [7:0] $end
$var wire 8 (" B [7:0] $end
$var wire 8 )" O [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ID $end
$var wire 8 *" A [7:0] $end
$var wire 3 +" Addr1 [2:0] $end
$var wire 3 ," Addr2 [2:0] $end
$var wire 8 -" B [7:0] $end
$var wire 8 ." Data1 [7:0] $end
$var wire 8 /" Data2 [7:0] $end
$var wire 4 0" opcode [3:0] $end
$var wire 32 1" instruction [31:0] $end
$upscope $end
$scope module IF $end
$var wire 8 2" A [7:0] $end
$var wire 3 3" Addr1 [2:0] $end
$var wire 3 4" Addr2 [2:0] $end
$var wire 8 5" B [7:0] $end
$var wire 8 6" Data1 [7:0] $end
$var wire 8 7" Data2 [7:0] $end
$var wire 1 ' clk $end
$var wire 1 ( countSteps $end
$var wire 1 ) dualUpdateWeights $end
$var wire 1 6 reset $end
$var wire 1 : updateWeights $end
$var reg 32 8" instruction [31:0] $end
$upscope $end
$scope module WB $end
$var wire 1 9" ANDout $end
$var wire 1 ? step $end
$var wire 1 ; writeTotalSteps $end
$var wire 8 :" updatedTotalSteps [7:0] $end
$var wire 8 ;" totalSteps [7:0] $end
$scope module cAdd1 $end
$var wire 1 9" step $end
$var wire 8 <" totalSteps [7:0] $end
$var wire 8 =" A [7:0] $end
$upscope $end
$upscope $end
$scope module rFile $end
$var wire 3 >" Addr1 [2:0] $end
$var wire 3 ?" Addr2 [2:0] $end
$var wire 8 @" Data1 [7:0] $end
$var wire 8 A" Data2 [7:0] $end
$var wire 8 B" alpha1 [7:0] $end
$var wire 8 C" alpha2 [7:0] $end
$var wire 8 D" beta1 [7:0] $end
$var wire 8 E" beta2 [7:0] $end
$var wire 1 ' clk $end
$var wire 1 6 reset $end
$var wire 8 F" theta1 [7:0] $end
$var wire 8 G" theta2 [7:0] $end
$var wire 1 = updateTotalSteps $end
$var wire 1 9 updateWeight $end
$var wire 8 H" updatedSteps [7:0] $end
$var reg 8 I" totalSteps [7:0] $end
$var integer 32 J" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx J"
bx I"
bz H"
b1010 G"
b1010 F"
b1010 E"
b1010 D"
b1010 C"
b1010 B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
x9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
b1010 ("
bx '"
bx &"
b1010 %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
b1010 x
b1010 w
bx v
bx u
bx t
b1010 s
bx r
bx q
b1010 p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
b1010 e
b1010 d
bx c
bx b
bx a
b1010 `
bx _
bx ^
b1010 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
b1010 R
b1010 Q
bx P
bx O
bx N
bx M
bx L
bx K
b1010 J
b1010 I
b1010 H
b1010 G
b1010 F
b1010 E
bx D
bx C
bx B
bx A
bx @
x?
bx >
x=
bx <
z;
z:
x9
b1010 8
b1010 7
x6
b1010 5
b1010 4
b1010 3
b1010 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
0*
x)
x(
0'
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5
b101x <
b101x :"
b101x <"
b1010 >
b1010 ;"
b1010 ="
b1010 I"
1'
#10
0'
#15
1'
#20
0'
#25
1'
#30
0'
#35
1'
#40
0'
#45
1'
#50
0'
#55
1'
#60
0'
#65
1'
#70
0'
#75
1'
#80
0'
#85
1'
#90
0'
#95
1'
#100
0'
#105
1'
#110
0'
#115
1'
#120
0'
#125
1'
#130
0'
#135
1'
#140
0'
#145
1'
#150
0'
#155
1'
#160
0'
#165
1'
#170
0'
#175
1'
#180
0'
#185
1'
#190
0'
#195
1'
#200
0'
